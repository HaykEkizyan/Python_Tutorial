Functional programming is a style of programming that (as the name suggests) is based around functions.
A key part of functional programming is higher-order functions. 
 Higher-order functions take other functions as arguments, or return them as results.
 
# 1

def apply_twice(func, arg):   # arg -> 0
    return func(func(arg))

def add_five(x):    # func -> add_five
    return x + 5

print(apply_twice(add_five, 0))    #  10

1.1

def apply_twice(func, arg):   # arg -> 10
    return func(func(arg))

def add_five(x):    # func -> add_five
    return x + 5

print(apply_twice(add_five, 10))    #  20

1.2

def test(func, arg):   # arg -> 3
    return func(func(arg))

def mult(x):    # func -> mult
    return x * x

print(test(mult, 3))    #  81


#2 Pure Functions
Functional programming seeks to use pure functions. Pure functions have no side effects, and return a value that depends only on their arguments.

#2.1 

def pure_function(x, y):
    temp = x + 2 * y
    return temp / (2 * x + y)

print(pure_function(2, 4))    #  1.25

#2.2  It's a pure function

def func(x):
  y = x**2
  z = x + y
  return z
  
  
#2.3  It' not a pure function

some_list = []

def impure(arg):
  some_list.append(arg)
  
  
  

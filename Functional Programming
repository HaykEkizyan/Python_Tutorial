Functional programming is a style of programming that (as the name suggests) is based around functions.
A key part of functional programming is higher-order functions. 
 Higher-order functions take other functions as arguments, or return them as results.
 
# 1

def apply_twice(func, arg):   # arg -> 0
    return func(func(arg))

def add_five(x):    # func -> add_five
    return x + 5

print(apply_twice(add_five, 0))    #  10

1.1

def apply_twice(func, arg):   # arg -> 10
    return func(func(arg))

def add_five(x):    # func -> add_five
    return x + 5

print(apply_twice(add_five, 10))    #  20

1.2

def test(func, arg):   # arg -> 3
    return func(func(arg))

def mult(x):    # func -> mult
    return x * x

print(test(mult, 3))    #  81


#2 Pure Functions
Functional programming seeks to use pure functions. Pure functions have no side effects, and return a value that depends only on their arguments.

#2.1 

def pure_function(x, y):
    temp = x + 2 * y
    return temp / (2 * x + y)

print(pure_function(2, 4))    #  1.25

#2.2  It's a pure function

def func(x):
  y = x**2
  z = x + y
  return z
  
  
#2.3  It' not a pure function

some_list = []

def impure(arg):
  some_list.append(arg)
  
  
Using pure functions has both advantages and disadvantages.
Pure functions are:
- easier to reason about and test.
- more efficient. Once the function has been evaluated for an input, the result can be stored and referred to the next time the 
  function of that input is needed, reducing the number of times the function is called. This is called memoization.
- easier to run in parallel.

The main disadvantage of using only pure functions is that they majorly complicate the otherwise simple task of I/O, 
 since this appears to inherently require side effects.
They can also be more difficult to write in some situations.



#3 Lambdas
Creating a function normally (using def) assigns it to a variable automatically.
This is different from the creation of other objects - such as strings and integers - which can be created on the fly, 
without assigning them to a variable. 
The same is possible with functions, provided that they are created using lambda syntax. 
Functions created this way are known as anonymous.
This approach is most commonly used when passing a simple function as an argument to another function. 
The syntax is shown in the next example and consists of the lambda keyword followed by a list of arguments, a colon, 
and the expression to evaluate and return.

Lambda functions get their name from lambda calculus, which is a model of computation invented by Alonzo Church.

#3.0

def my_func(f, arg):
  return f(arg)

my_func(lambda x: 2*x*x, 5)


#3.1.0 named function

def polynomial(x):
    return x**2 + 5*x + 4
print(polynomial(-4))                    #  0

#3.1.1 lambda

print((lambda x: x**2 +5*x +4) (-4))     #  0


 



